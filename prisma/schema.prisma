generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(cuid())
  email     String   @unique
  password  String
  name      String
  role      Role     @default(EMPLOYEE)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Employee specific fields
  phone        String?
  location     String?
  experience   Int?
  skills       String[]
  resumeUrl    String?
  bio          String?
  
  // Relations
  jobPosts     Job[]
  applications Application[]

  @@map("users")
  Resume Resume[]
}

model Job {
  id          String   @id @default(cuid())
  title       String
  company     String
  location    String
  type        JobType  @default(FULL_TIME)
  salary      String
  description String
  requirements String[]
  benefits    String[]
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  employerId   String
  employer     User          @relation(fields: [employerId], references: [id], onDelete: Cascade)
  applications Application[]

  @@map("jobs")
}

model Application {
  id        String            @id @default(cuid())
  status    ApplicationStatus @default(PENDING)
  coverLetter String?
  createdAt DateTime          @default(now())
  updatedAt DateTime          @updatedAt

  // Relations
  jobId      String
  job        Job    @relation(fields: [jobId], references: [id], onDelete: Cascade)
  employeeId String
  employee   User   @relation(fields: [employeeId], references: [id], onDelete: Cascade)

  @@unique([jobId, employeeId])
  @@map("applications")
}

model Resume {
  id              String          @id @default(cuid())
  filename        String          // Generated filename
  originalName    String          // User's original filename
  url            String          // File URL
  fileSize       Int             // File size in bytes
  mimeType       String          // File MIME type
  title          String?         // User-defined title
  description    String?         // Optional description
  experienceLevel ExperienceLevel // Categorization
  isActive       Boolean         @default(true)
  isPrimary      Boolean         @default(false) // One primary per user
  createdAt      DateTime        @default(now())
  updatedAt      DateTime        @updatedAt
  
  userId         String
  user           User            @relation(fields: [userId], references: [id])
}

enum ExperienceLevel {
  ENTRY_LEVEL
  MID_LEVEL
  SENIOR_LEVEL
  EXPERT
}

enum Role {
  EMPLOYEE
  EMPLOYER
}

enum JobType {
  FULL_TIME
  PART_TIME
  CONTRACT
  REMOTE
}

enum ApplicationStatus {
  PENDING
  REVIEWED
  ACCEPTED
  REJECTED
}