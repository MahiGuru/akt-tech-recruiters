generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verificationtokens")
}

model User {
  id                                                                String                   @id @default(cuid())
  name                                                              String?
  email                                                             String                   @unique
  emailVerified                                                     DateTime?
  image                                                             String?
  password                                                          String?
  role                                                              Role                     @default(EMPLOYEE)
  createdAt                                                         DateTime                 @default(now())
  updatedAt                                                         DateTime                 @updatedAt
  phone                                                             String?
  location                                                          String?
  experience                                                        Int?
  skills                                                            String[]
  resumeUrl                                                         String?
  bio                                                               String?
  accounts                                                          Account[]
  applications                                                      Application[]
  recruiterApplications                                             Application[]            @relation("RecruiterSubmittedApplication")
  addedCandidates                                                   Candidate[]              @relation("RecruiterAddedCandidate")
  feedbackSubmissions                                               Interview[]              @relation("InterviewFeedbackSubmitter")
  scheduledInterviews                                               Interview[]              @relation("RecruiterScheduledInterview")
  jobPosts                                                          Job[]
  receivedNotifications                                             Notification[]           @relation("NotificationReceiver")
  sentNotifications                                                 Notification[]           @relation("NotificationSender")
  passwordResetTokens                                               PasswordResetToken[]
  placementDocuments                                                PlacementDocument[]      @relation("PlacementDocumentUploader")
  placement_time_entries_placement_time_entries_reviewedByIdTousers placement_time_entries[] @relation("placement_time_entries_reviewedByIdTousers")
  placement_time_entries_placement_time_entries_userIdTousers       placement_time_entries[] @relation("placement_time_entries_userIdTousers")
  placementCreated                                                  Placement[]              @relation("PlacementCreatedBy")
  placementUpdated                                                  Placement[]              @relation("PlacementUpdatedBy")
  managedRecruiters                                                 Recruiter[]              @relation("AdminRecruiter")
  recruiterProfile                                                  Recruiter?
  Resume                                                            Resume[]
  sessions                                                          Session[]
  managerTimeReviews                                                TimeEntry[]              @relation("ManagerTimeReviews")
  userTimeEntries                                                   TimeEntry[]              @relation("UserTimeEntries")
  workType                                                          String?


  createdFromCandidate  Candidate[] @relation("CandidateCreatedUser")
  candidateUsersCreated Candidate[] @relation("CandidateUserCreator")

  @@map("users")
}

model PasswordResetToken {
  id        String   @id @default(cuid())
  token     String   @unique
  userId    String
  expires   DateTime
  used      Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("password_reset_tokens")
}

model Recruiter {
  id             String        @id @default(cuid())
  userId         String        @unique
  recruiterType  RecruiterType @default(TA)
  department     String?
  isActive       Boolean       @default(true)
  adminId        String?
  createdAt      DateTime      @default(now())
  updatedAt      DateTime      @updatedAt
  adminRecruiter User?         @relation("AdminRecruiter", fields: [adminId], references: [id])
  user           User          @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("recruiters")
}

model Candidate {
  id         String          @id @default(cuid())
  name       String
  email      String
  phone      String?
  location   String?
  experience Int?
  skills     String[]
  bio        String?
  source     String? // Where the candidate was found (LinkedIn, referral, etc.)
  notes      String? // Recruiter notes about the candidate
  status     CandidateStatus @default(ACTIVE)
  createdAt  DateTime        @default(now())
  updatedAt  DateTime        @updatedAt

  // NEW: User creation tracking
  createdUserId String? // User account created from this candidate
  userCreatedAt DateTime? // When user account was created
  userCreatedBy String? // Who created the user account

  // Relations
  addedById String // Recruiter who added this candidate
  addedBy   User   @relation("RecruiterAddedCandidate", fields: [addedById], references: [id])

  // NEW: User creation relations
  createdUser User? @relation("CandidateCreatedUser", fields: [createdUserId], references: [id])
  userCreator User? @relation("CandidateUserCreator", fields: [userCreatedBy], references: [id])

  resumes                Resume[]
  applications           Application[]
  interviews             Interview[]
  placement              Placement?
  placement_time_entries placement_time_entries[]

  @@unique([email, addedById]) // Prevent duplicate candidates by same recruiter
  @@map("candidates")
}

model Interview {
  id                    String          @id @default(cuid())
  title                 String
  description           String?
  scheduledAt           DateTime
  duration              Int             @default(60)
  meetingLink           String?
  notes                 String?
  status                InterviewStatus @default(SCHEDULED)
  reminderSent          Boolean         @default(false)
  createdAt             DateTime        @default(now())
  updatedAt             DateTime        @updatedAt
  candidateId           String
  scheduledById         String
  communicationRating   Int?
  culturalFitRating     Int?
  feedback              String?
  feedbackSubmitted     Boolean         @default(false)
  feedbackSubmittedAt   DateTime?
  feedbackSubmittedById String?
  nextSteps             String?
  outcome               String?
  overallRating         Int?
  recommendations       String?
  strengths             String?
  technicalRating       Int?
  weaknesses            String?
  wouldRecommendHiring  Boolean?
  candidate             Candidate       @relation(fields: [candidateId], references: [id], onDelete: Cascade)
  feedbackSubmitter     User?           @relation("InterviewFeedbackSubmitter", fields: [feedbackSubmittedById], references: [id])
  scheduledBy           User            @relation("RecruiterScheduledInterview", fields: [scheduledById], references: [id])

  @@map("interviews")
}

model Notification {
  id           String           @id @default(cuid())
  title        String
  message      String
  type         NotificationType @default(INFO)
  isRead       Boolean          @default(false)
  senderId     String?
  receiverId   String
  interviewId  String?
  scheduledFor DateTime?
  createdAt    DateTime         @default(now())
  updatedAt    DateTime         @updatedAt
  receiver     User             @relation("NotificationReceiver", fields: [receiverId], references: [id])
  sender       User?            @relation("NotificationSender", fields: [senderId], references: [id])

  @@map("notifications")
}

model Job {
  id           String        @id @default(cuid())
  title        String
  company      String
  location     String
  type         JobType       @default(FULL_TIME)
  jobTypes     String[]
  skills       String[]
  salary       String
  description  String
  requirements String[]
  benefits     String[]
  isActive     Boolean       @default(true)
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
  employerId   String
  applications Application[]
  employer     User          @relation(fields: [employerId], references: [id], onDelete: Cascade)

  @@map("jobs")
}

model Application {
  id            String            @id @default(cuid())
  status        ApplicationStatus @default(PENDING)
  coverLetter   String?
  resumeUsed    String?
  createdAt     DateTime          @default(now())
  updatedAt     DateTime          @updatedAt
  jobId         String
  employeeId    String?
  candidateId   String?
  submittedById String?
  candidate     Candidate?        @relation(fields: [candidateId], references: [id], onDelete: Cascade)
  employee      User?             @relation(fields: [employeeId], references: [id], onDelete: Cascade)
  job           Job               @relation(fields: [jobId], references: [id], onDelete: Cascade)
  submittedBy   User?             @relation("RecruiterSubmittedApplication", fields: [submittedById], references: [id])

  @@unique([jobId, employeeId])
  @@unique([jobId, candidateId])
  @@map("applications")
}

model Resume {
  id              String          @id @default(cuid())
  filename        String
  originalName    String
  url             String
  fileSize        Int
  mimeType        String
  title           String?
  description     String?
  experienceLevel ExperienceLevel
  isActive        Boolean         @default(true)
  isPrimary       Boolean         @default(false)
  createdAt       DateTime        @default(now())
  updatedAt       DateTime        @updatedAt
  userId          String?
  candidateId     String?
  candidate       Candidate?      @relation(fields: [candidateId], references: [id])
  user            User?           @relation(fields: [userId], references: [id])

  @@map("resumes")
}

model Placement {
  id                     String                   @id @default(cuid())
  candidateId            String                   @unique
  createdById            String
  updatedById            String
  createdAt              DateTime                 @default(now())
  updatedAt              DateTime                 @updatedAt
  salary                 Decimal                  @db.Decimal(15, 2)
  currency               String                   @default("USD")
  salaryType             SalaryType               @default(ANNUAL)
  bonus                  Decimal?                 @db.Decimal(15, 2)
  commission             Decimal?                 @db.Decimal(15, 2)
  benefits               String[]
  clientCompany          String
  clientContactName      String?
  clientContactEmail     String?
  clientContactPhone     String?
  clientAddress          String?
  clientIndustry         String?
  vendorCompany          String?
  vendorContactName      String?
  vendorContactEmail     String?
  vendorContactPhone     String?
  vendorRate             Decimal?                 @db.Decimal(15, 2)
  vendorCommission       Decimal?                 @db.Decimal(15, 2)
  accountManager         String?
  placementFee           Decimal?                 @db.Decimal(15, 2)
  feeType                FeeType?                 @default(PERCENTAGE)
  feePercentage          Decimal?                 @db.Decimal(5, 2)
  paymentTerms           String?
  jobTitle               String
  startDate              DateTime?
  endDate                DateTime?
  placementType          PlacementType            @default(PERMANENT)
  workLocation           String?
  workType               WorkType                 @default(FULL_TIME)
  reportingManager       String?
  notes                  String?
  milestones             Json                     @default("[]")
  documents              String[]                 @default([])
  hourlyRate             Decimal?                 @default(75.00) @db.Decimal(8, 2)
  placementDocuments     PlacementDocument[]
  placement_time_entries placement_time_entries[]
  candidate              Candidate                @relation(fields: [candidateId], references: [id], onDelete: Cascade)
  createdBy              User                     @relation("PlacementCreatedBy", fields: [createdById], references: [id])
  updatedBy              User                     @relation("PlacementUpdatedBy", fields: [updatedById], references: [id])

  @@map("placements")
}

model PlacementDocument {
  id           String    @id @default(cuid())
  placementId  String
  filename     String
  originalName String
  url          String
  fileSize     Int
  mimeType     String
  documentType String?
  uploadedById String
  createdAt    DateTime  @default(now())
  placement    Placement @relation(fields: [placementId], references: [id], onDelete: Cascade)
  uploadedBy   User      @relation("PlacementDocumentUploader", fields: [uploadedById], references: [id])

  @@map("placement_documents")
}

model TimeEntry {
  id             String          @id @default(cuid())
  userId         String
  date           DateTime
  hours          Decimal         @db.Decimal(4, 2)
  description    String?
  project        String?
  status         TimeEntryStatus @default(PENDING)
  submittedAt    DateTime        @default(now())
  reviewedAt     DateTime?
  reviewedById   String?
  reviewComments String?
  createdAt      DateTime        @default(now())
  updatedAt      DateTime        @updatedAt
  reviewedBy     User?           @relation("ManagerTimeReviews", fields: [reviewedById], references: [id])
  user           User            @relation("UserTimeEntries", fields: [userId], references: [id], onDelete: Cascade)

  @@map("time_entries")
}

model placement_time_entries {
  id                                               String          @id
  userId                                           String
  candidateId                                      String
  placementId                                      String?
  date                                             DateTime
  hours                                            Decimal         @db.Decimal(4, 2)
  description                                      String
  category                                         String          @default("account_management")
  billable                                         Boolean         @default(true)
  hourlyRate                                       Decimal         @default(75.00) @db.Decimal(8, 2)
  status                                           TimeEntryStatus @default(PENDING)
  submittedAt                                      DateTime        @default(now())
  reviewedAt                                       DateTime?
  reviewedById                                     String?
  reviewComments                                   String?
  createdAt                                        DateTime        @default(now())
  updatedAt                                        DateTime
  candidates                                       Candidate       @relation(fields: [candidateId], references: [id], onDelete: Cascade)
  placements                                       Placement?      @relation(fields: [placementId], references: [id])
  users_placement_time_entries_reviewedByIdTousers User?           @relation("placement_time_entries_reviewedByIdTousers", fields: [reviewedById], references: [id])
  users_placement_time_entries_userIdTousers       User            @relation("placement_time_entries_userIdTousers", fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, candidateId, date])
}

enum TimeEntryStatus {
  PENDING
  APPROVED
  REJECTED
  DRAFT
}

enum SalaryType {
  ANNUAL
  MONTHLY
  HOURLY
}

enum FeeType {
  PERCENTAGE
  FIXED
}

enum PlacementType {
  PERMANENT
  CONTRACT
  TEMP_TO_PERM
}

enum WorkType {
  FULL_TIME
  PART_TIME
  CONTRACT
  REMOTE
  HYBRID
}

enum ExperienceLevel {
  ENTRY_LEVEL
  MID_LEVEL
  SENIOR_LEVEL
  EXECUTIVE
  FREELANCE
  INTERNSHIP
}

enum Role {
  EMPLOYEE
  EMPLOYER
  RECRUITER
}

enum RecruiterType {
  ADMIN
  TA
  HR
  CS
  LEAD
  JUNIOR
}

enum NotificationType {
  INFO
  WARNING
  SUCCESS
  ERROR
  APPROVAL_REQUEST
  INTERVIEW_REMINDER
}

enum JobType {
  FULL_TIME
  PART_TIME
  CONTRACT
  REMOTE
  HYBRID
  INTERNSHIP
  FREELANCE
}

enum ApplicationStatus {
  PENDING
  REVIEWED
  ACCEPTED
  REJECTED
}

enum CandidateStatus {
  ACTIVE
  PLACED
  INACTIVE
  DO_NOT_CONTACT
}

enum InterviewStatus {
  SCHEDULED
  CONFIRMED
  IN_PROGRESS
  COMPLETED
  CANCELLED
  RESCHEDULED
}
