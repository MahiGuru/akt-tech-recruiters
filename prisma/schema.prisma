generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verificationtokens")
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String    @unique
  emailVerified DateTime?
  image         String?
  password      String?
  role          Role      @default(EMPLOYEE)
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  // Employee specific fields
  phone        String?
  location     String?
  experience   Int?
  skills       String[]
  resumeUrl    String?
  bio          String?
  
  // NextAuth relations
  accounts Account[]
  sessions Session[]
  
  // App relations
  jobPosts     Job[]
  applications Application[]
  Resume       Resume[]
  
  // Recruiter relations
  recruiterProfile      Recruiter?
  managedRecruiters     Recruiter[]  @relation("AdminRecruiter")
  sentNotifications     Notification[] @relation("NotificationSender")
  receivedNotifications Notification[] @relation("NotificationReceiver")
  
  // NEW: Candidate management
  addedCandidates       Candidate[] @relation("RecruiterAddedCandidate")
  recruiterApplications Application[] @relation("RecruiterSubmittedApplication")

  @@map("users")
}

model Recruiter {
  id             String        @id @default(cuid())
  userId         String        @unique
  recruiterType  RecruiterType @default(TA)
  department     String?
  isActive       Boolean       @default(true)
  adminId        String?       // Reference to admin recruiter
  createdAt      DateTime      @default(now())
  updatedAt      DateTime      @updatedAt
  
  // Relations
  user           User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  adminRecruiter User?         @relation("AdminRecruiter", fields: [adminId], references: [id])
  
  @@map("recruiters")
}

// NEW: Candidate model for recruiter-added candidates
model Candidate {
  id           String   @id @default(cuid())
  name         String
  email        String
  phone        String?
  location     String?
  experience   Int?
  skills       String[]
  bio          String?
  source       String?  // Where the candidate was found (LinkedIn, referral, etc.)
  notes        String?  // Recruiter notes about the candidate
  status       CandidateStatus @default(ACTIVE)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  
  // Relations
  addedById    String   // Recruiter who added this candidate
  addedBy      User     @relation("RecruiterAddedCandidate", fields: [addedById], references: [id])
  
  resumes      Resume[]
  applications Application[]
  
  @@unique([email, addedById]) // Prevent duplicate candidates by same recruiter
  @@map("candidates")
}

model Notification {
  id          String             @id @default(cuid())
  title       String
  message     String
  type        NotificationType   @default(INFO)
  isRead      Boolean            @default(false)
  senderId    String
  receiverId  String
  createdAt   DateTime           @default(now())
  updatedAt   DateTime           @updatedAt
  
  // Relations
  sender      User               @relation("NotificationSender", fields: [senderId], references: [id])
  receiver    User               @relation("NotificationReceiver", fields: [receiverId], references: [id])
  
  @@map("notifications")
}

model Job {
  id          String   @id @default(cuid())
  title       String
  company     String
  location    String
  type        JobType  @default(FULL_TIME)
  salary      String
  description String
  requirements String[]
  benefits    String[]
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  employerId   String
  employer     User          @relation(fields: [employerId], references: [id], onDelete: Cascade)
  applications Application[]

  @@map("jobs")
}

model Application {
  id          String            @id @default(cuid())
  status      ApplicationStatus @default(PENDING)
  coverLetter String?
  resumeUsed  String?
  createdAt   DateTime          @default(now())
  updatedAt   DateTime          @updatedAt

  // Relations
  jobId      String
  job        Job    @relation(fields: [jobId], references: [id], onDelete: Cascade)
  
  // UPDATED: Support both employee self-applications and recruiter applications
  employeeId String?
  employee   User?  @relation(fields: [employeeId], references: [id], onDelete: Cascade)
  
  // NEW: Candidate applications (recruiter-submitted)
  candidateId String?
  candidate   Candidate? @relation(fields: [candidateId], references: [id], onDelete: Cascade)
  
  // NEW: Track who submitted the application (for recruiter applications)
  submittedById String?
  submittedBy   User?   @relation("RecruiterSubmittedApplication", fields: [submittedById], references: [id])
  
  @@unique([jobId, employeeId])     // Prevent duplicate employee applications
  @@unique([jobId, candidateId])    // Prevent duplicate candidate applications
  @@map("applications")
}

model Resume {
  id              String          @id @default(cuid())
  filename        String          // Generated filename
  originalName    String          // User's original filename
  url            String          // File URL
  fileSize       Int             // File size in bytes
  mimeType       String          // File MIME type
  title          String?         // User-defined title
  description    String?         // Optional description
  experienceLevel ExperienceLevel // Categorization
  isActive       Boolean         @default(true)
  isPrimary      Boolean         @default(false) // One primary per user/candidate
  createdAt      DateTime        @default(now())
  updatedAt      DateTime        @updatedAt
  
  // UPDATED: Support both users and candidates
  userId         String?
  user           User?           @relation(fields: [userId], references: [id])
  
  candidateId    String?
  candidate      Candidate?      @relation(fields: [candidateId], references: [id])
  
  @@map("resumes")
}

enum ExperienceLevel {
  ENTRY_LEVEL
  MID_LEVEL
  SENIOR_LEVEL
  EXECUTIVE
  FREELANCE
  INTERNSHIP
}

enum Role {
  EMPLOYEE
  EMPLOYER
  RECRUITER
}

enum RecruiterType {
  ADMIN
  TA      // Technical Analyst
  HR      // Human Resources
  CS      // Customer Success
  LEAD    // Lead Recruiter
  JUNIOR  // Junior Recruiter
}

enum NotificationType {
  INFO
  WARNING
  SUCCESS
  ERROR
  APPROVAL_REQUEST
}

enum JobType {
  FULL_TIME
  PART_TIME
  CONTRACT
  REMOTE
}

enum ApplicationStatus {
  PENDING
  REVIEWED
  ACCEPTED
  REJECTED
}

// NEW: Candidate status
enum CandidateStatus {
  ACTIVE
  PLACED
  INACTIVE
  DO_NOT_CONTACT
}